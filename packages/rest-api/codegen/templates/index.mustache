'use strict';

const fs = require('fs');
const path = require('path');
const http = require('http');
const config = require('config');

const app = require('express')();
const requestId = require('express-request-id')();
const swaggerTools = require('oas-tools');
const jsyaml = require('js-yaml');

const serverPort = config.get('server.port');

const logger = require('utils').logger;

// oasTools configuration
const options = {
  customLogger: logger,
  loglevel: config.get('log.level'),
  controllers: path.join(__dirname, './controllers'),
  useStubs: process.env.NODE_ENV === 'development' // Conditionally turn on stubs (mock mode)
};

swaggerTools.configure(options);

// The Swagger document (require it, build it programmatically, fetch it from a URL, ...)
const spec = fs.readFileSync(path.join(__dirname,'api/swagger.yaml'), 'utf8');
const swaggerDoc = jsyaml.safeLoad(spec);

// Initialize the Swagger middleware
swaggerTools.initializeMiddleware(swaggerDoc, app, function (middleware) {
  // Add request id
  app.use(requestId);

  // Interpret Swagger resources and attach metadata to request - must be first in swagger-tools middleware chain
  app.use(middleware.swaggerMetadata());

  // Validate Swagger requests
  app.use(middleware.swaggerValidator());

  // Route validated requests to appropriate controller
  app.use(middleware.swaggerRouter(options));

  // Serve the Swagger documents and Swagger UI
  app.use(middleware.swaggerUi());

  // Start the server
  http.createServer(app).listen(serverPort, function () {
    logger.info('[webapp] server is started', { port: serverPort, host: 'localhost'});
    logger.info(`[webapp] swagger-ui is available on http://localhost:${serverPort}/docs`);
  });
});
